@inject IProductService ProductService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div id="@carouselName" class="carousel slide" data-bs-ride="carousel" data-bs-wrap="true" data-bs-interval="5000" data-bs-pause="false">
	<div class="carousel-indicators">
		<button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
		<button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
		<button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
	</div>
	<div class="carousel-inner">
		<div class="carousel-item active">
			<img src="/images/1.jpg" class="d-block w-100" alt="...">
		</div>
		<div class="carousel-item">
			<img src="/images/2.png" class="d-block w-100" alt="...">
		</div>
		<div class="carousel-item">
			<img src="/images/3.png" class="d-block w-100" alt="...">
		</div>
	</div>
	<button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
		<span class="carousel-control-prev-icon" aria-hidden="true"></span>
		<span class="visually-hidden">Previous</span>
	</button>
	<button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
		<span class="carousel-control-next-icon" aria-hidden="true"></span>
		<span class="visually-hidden">Next</span>
	</button>
</div>

<center><h2>CÁC SẢN PHẨM BÁN CHẠY</h2></center>
@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    <div class="container">
        @foreach (var product in ProductService.Products)
        {
            @if (product.Featured)
            {
                <div class="featured-product">
                    <div>
                        <a href="product/@product.Id">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl">
                            }
                            else if (product.Images.Count > 0)
                            {
                                <img src="@product.Images[0].Data" />
                            }
                        </a>
                    </div>
                    <h4><a href="product/@product.Id">@product.Title</a></h4>
                    @if (product.Variants != null && product.Variants.Count > 0)
                    {
                        <h5 class="price">
                            @ProductService.FormatPrice(@product.Variants[0].Price)
                        </h5>
                    }
                </div>
            }
        }
    </div>
}

@code {
    const string carouselName = "carouselExampleIndicators"; // NOTE: the ID of the carousel

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		object[] args = { carouselName };
		await JSRuntime.InvokeVoidAsync("startCarousel", args); // NOTE: call JavaScript function with the ID of the carousel
	}

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
		
}
